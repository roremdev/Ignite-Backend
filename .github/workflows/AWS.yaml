name: AWS Development Deployment

on:
  pull_request:
    branches:
      - development
      - staging
      - production
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build Server
    runs-on: ubuntu-latest

    steps:
      - name: ‚öô Configure GitHub Actions
        uses: actions/checkout@v3

      - name: üõ† Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üõ† Setup PNPM
        uses: pnpm/action-setup@v2.2.2
        with:
          version: latest

      - name: üöß Install dependencies and Build project
        run: pnpm install --no-frozen-lockfile && pnpm run build

      - name: üè∑ Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            dist/
            Dockerfile
            pnpm-lock.yaml
            package.json


  publish:
    if: github.event.pull_request.merged == true
    name: Build and Push Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: üè∑ Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: üîí AWS Authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: üöß Set up Cloud SDK
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üöÄ Build and publish to Elastic Container Registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ignite
          IMAGE_TAG: ${{ github.base_ref }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#  provision:
#    runs-on: ubuntu-latest
#    needs: [ publish ]
#
#    defaults:
#      run:
#        working-directory: aws
#
#    outputs:
#      init: ${{ steps.terraform_init.outcome }}
#
#    steps:
#      - name: ‚öôÔ∏è Configure GitHub Actions
#        uses: actions/checkout@v3
#
#      - name: ‚öôÔ∏è Configure Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      - name: üöß Defining environment context
#        run: |
#          mkdir .terraform
#          cd .terraform
#          echo server >> environment
#
#      - name: ‚ôªÔ∏è Terraform replace
#        id: terraform_init
#        continue-on-error: true
#        run: |
#          terraform init
#          terraform apply -replace="module.service.aws_ecs_service.development" -auto-approve